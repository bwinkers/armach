"use strict";

var Promise = require('bluebird') // Promises
    , _ = require('lodash');

var defaultSiteAlias = 'parked'; // The default iste if one is not defined
var siteFilePath = ''; // The full path to the site file
var hostFilePath = ''; // The full path to the host file

/**
 * A middleware that loads hostname based config files
 */
function middleware(app, settings) {

    return function (conn) {

        hostFilePath = settings.configDir + '/hosts/' + conn.host + conn.ar.jsonExt;

        // Verify the host file exists
        return conn.ar.fileStatus(hostFilePath)
            .then(function(hostStatus) {

                // If ActiveRules has determined this is a file, laod it.
                if(hostStatus === 'file') {

                    // load host JSON
                    return conn.ar.loadJSON(hostFilePath)
                        .then(function(hostConfig) {

                            // Does the host have a site defined?
                            if(typeof hostConfig.site !== 'undefined') {

                                siteFilePath = settings.configDir + '/sites/' + hostConfig.site + conn.ar.jsonExt;
                            }
                            else {
                                // If no site is specfied but the hostname is supported the host is parked.
                                siteFilePath = settings.configDir + '/sites/' + defaultSiteAlias + conn.ar.jsonExt;
                            }
                            // Verify the site file exists
                            return conn.ar.fileStatus(siteFilePath)
                                .then(function(siteStatus) {

                                    // If ActiveRules has determined this is a file, load it.
                                    if(siteStatus === 'file') {

                                        // Load Site JSON
                                        return conn.ar.loadJSON(siteFilePath)
                                            .then(function(siteConfig) {

                                                // Deep merge the hostConfig into the siteConfig
                                                _.assign(siteConfig, hostConfig);

                                                conn.site = siteConfig;

                                                return conn.call(app)

                                            }); // End loading site JSON
                                    }
                                    else {
                                        return conn.call(app);
                                    }
                                }); // End site file check
                        }); // End loading host JSON
                } // End the host path type check
        }); // End the host path existence
    }; // End the main return function
}

// Override the default module exports with our object created above.
module.exports = middleware;

