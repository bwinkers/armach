"use strict";

var Promise = require('bluebird')
    , fsp = require('promised-io/fs') // Promises around fs calls;
    , _ = require('lodash')
    , fs = require('fs');


/**
 * A middleware that loads hostname based config files
 */
function middleware(app, settings) {

    return function (conn) {

        var ar = {

            // Define the JSON extension we use

            jsonExt: settings.jsonExt,

            /**
             * Return the ActiveRules version
             */
            version: function() {
                return settings.version;
            },

            /**
             * Returns stats for the given file or null if it doesn't exist.
             */
            getFileStats: function(path) {
                return new Promise(function (resolve, reject) {
                    fs.stat(path, function (error, stats) {

                        if (error && error.code !== "ENOENT") {
                            reject(error);
                        } else {
                            resolve(stats || null);
                        }
                    });
                });
            },

            /**
             * Returns one of directory|file|null
             */
            fileStatus: function(path) {
                return this.getFileStats(path)
                    .then(function (stats) {

                        if (stats && stats.isFile()) {
                            return 'file';
                        }

                        if (stats && stats.isDirectory()) {
                            return 'directory'
                        }

                        return null
                    });
            },

            /**
             * Load a JSON file into a JavaScript object and optionally valdiate against a JSON Schema
             */
            loadJSON: function(filePath) {

                var configObj; // The object to return

                // Return a promise right away
                return new Promise(function (fulfill, reject) {

                    return fsp.readFile(filePath, 'utf8')
                        .then(function (file) {
                            try {
                                configObj = JSON.parse(file);
                            } catch (err) {
                                // probably bad JSON
                                console.log(err);
                            }

                            fulfill(configObj);

                        }, function (err) {
                            reject(err);
                        });
                });
            },
        };

        // Add the AR object created above to the connection.
        conn.ar = ar;

        // Go onto the next  middleware
        return conn.call(app);
    }

}

module.exports = middleware;

