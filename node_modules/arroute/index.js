"use strict";
var nugget = require('nugget');
var _ = require('lodash');
var arfunc = require('arfunc') // ActiveRules Functionality

/**
 * This function loads routes from the confogured services.
 *
 * @type {loadServiceRoutes}
 */
exports.loadServices = loadServices;

/**
 * This will be populated with registered controllers.
 * Endpoints can only load function from registered controllers.
 *
 * @type object
 */
var controllers = {}

var services = {};


/**
 * Extract all the API elements from the Nugget JSON schema create a route for each.
 * Each Middleware route must be explicitly enabled in a site config for it to be accessed by that site.
 *
 * @param app
 */
function loadServices(app, settings) {

    console.log(settings.configDir);

    var services = settings.services;

    var configDir = settings.configDir;

    for (var key in services) {
        if (services.hasOwnProperty(key)) {

            console.log("Attempting to load Service: " + key);

            controllers[key] = require(services[key]);

            loadService(app, key, configDir);
        }
    }
}


/**
 * Load a service. A service will have have routes defined in an endpoints.json file.
 *
 * @param app
 * @param service
 */
function loadService(app, service, configDir) {

    var serviceModulePath = configDir  + '/services/' + service;

    services[service] = require(serviceModulePath);

    app.use(services[service]);


    var servicePath = configDir  + '/services/' + service + '/routes.json';

    return nugget.loadCoreSchemaObject(servicePath, '/schema/activerules/webService.json')
        .then(function(routes) {

            console.log("Loaded Service: " + service);

            _.forOwn(routes, function(route) {
                // load each route
                loadRoute(app, route);
            });
        });
}


/**
 * Load an app route, optionally provide a override method.
 *
 * @param app
 * @param route
 */
function loadRoute(app, route, method) {

    // The methods we support
    var methods = ['delete','get','head','options','post','put','trace'];

    // Scrub our method
    if(typeof method === 'undefined') {
        // If no method was passed use the route defined method(s)

        // If we have a string it represents a route for one method
        if(typeof route.method === 'string') {
            method = route.method.toLowerCase();
        }
        // If the method is an array object load a route for each method
        if(typeof route.method === 'object') {
            // Create local var for routes
            var routes = route.method;

            // Load route for each method
            for (var i in routes) {
                loadRoute(app, route, routes[i]);
            }
        }

    } else {
        // Ensure lowercase for match
        method = method.toLowerCase();
    }

    // If the method was "all" add a route for each method
    if(method === 'all') {
        for (var ii in methods) {
            loadRoute(app, route, methods[ii]);
        }

        return;
    }

    // Only add routes for valid methods
    if(_.includes(methods, method)) {


        app[method](route.path, function (conn) {
            return controllers[route.controller][route.action](conn)
        });

        console.log('Routed ' + method.toUpperCase() + ' '  + route.path + ' to ' + route.controller + '::' + route.action)
    }
}