"use strict";
var nugget = require('nugget');
var _ = require('lodash');
var nugget = require('nugget');
var auth = require('arauth');

exports.loadRoutes = loadRoutes;

var controllers = {}
controllers.nugget = nugget;
controllers.auth = auth; // ActiveRules authentication via Passport

/**
 * Extract all the API elements from the Nugget JSON schema create a route for each.
 * Each Middleware route must be explicitly enabled in a site config for it to be accessed by that site.
 *
 * @param app
 */
function loadRoutes(app, settings) {

    var routes = settings.routes;

    var errObj = {
        "httpCode": 404,
        "logMessage": "they didn't use the password",
        "lten": "test"
    }

    nugget.coreSchemaObject(errObj, '/schema/activerules/errorMessage.json')
        .then(function(obj){
            console.log(obj);
        }
    );

    // Loop through routes
    _.forOwn(routes, function(route) {

        // load each route
        loadRoute(app, route);
    });


}

/**
 * Load an app route, optionally provide a override method.
 *
 * @param app
 * @param route
 */
function loadRoute(app, route, method) {

    // The methods we support
    var methods = ['delete','get','head','options','post','put','trace'];

    // Scrub our method
    if(typeof method === 'undefined') {
        // If no method was passed use the route defined method(s)

        // If we have a string it represents a route for one method
        if(typeof route.method === 'string') {
            method = route.method.toLowerCase();
        }
        // If the method is an array object load a route for each method
        if(typeof route.method === 'object') {
            // Create local var for routes
            var routes = route.method;

            // Load route for each method
            for (var i in routes) {
                loadRoute(app, route, routes[i]);
            }
        }

    } else {
        // Ensure lowercase for match
        method = method.toLowerCase();
    }

    // If the method was "all" add a route for each method
    if(method === 'all') {
        for (var i in methods) {
            loadRoute(app, route, methods[i]);
        }

        return;
    }

    // Only add routes for valid methods
    if(_.includes(methods, method)) {

        app[method](route.path, function (conn) {
            return controllers[route.arController][route.arMethod](conn)
        });

        console.log('Routed ' + method.toUpperCase() + ' '  + route.path + ' to ' + route.arController + '::' + route.arMethod)
    }
}







